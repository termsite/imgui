# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include("cmake/cmkr.cmake" OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(imgui_template)

if(CMKR_ROOT_PROJECT AND NOT CMKR_DISABLE_VCPKG)
	include(FetchContent)
	message(STATUS "Fetching vcpkg...")
	FetchContent_Declare(vcpkg URL "https://github.com/microsoft/vcpkg/archive/refs/tags/2021.05.12.tar.gz")
	FetchContent_MakeAvailable(vcpkg)
	include("${vcpkg_SOURCE_DIR}/scripts/buildsystems/vcpkg.cmake")
endif()

# Packages
find_package(glfw3 REQUIRED)

find_package(GLEW REQUIRED)

# Target imgui
set(CMKR_TARGET imgui)
set(imgui_SOURCES "")

list(APPEND imgui_SOURCES
	"third_party/imgui/imgui.cpp"
	"third_party/imgui/imgui_demo.cpp"
	"third_party/imgui/imgui_draw.cpp"
	"third_party/imgui/imgui_tables.cpp"
	"third_party/imgui/imgui_widgets.cpp"
	"third_party/imgui/imconfig.h"
	"third_party/imgui/imgui.h"
	"third_party/imgui/imgui_internal.h"
	"third_party/imgui/imstb_rectpack.h"
	"third_party/imgui/imstb_textedit.h"
	"third_party/imgui/imstb_truetype.h"
	"third_party/imgui/backends/imgui_impl_glfw.cpp"
	"third_party/imgui/backends/imgui_impl_glfw.h"
	"third_party/imgui/backends/imgui_impl_opengl3.cpp"
	"third_party/imgui/backends/imgui_impl_opengl3.h"
)

list(APPEND imgui_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${imgui_SOURCES})
add_library(imgui STATIC)

if(imgui_SOURCES)
	target_sources(imgui PRIVATE ${imgui_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${imgui_SOURCES})

target_compile_features(imgui PUBLIC
	cxx_std_11
)

target_include_directories(imgui PUBLIC
	"third_party/imgui"
)

target_link_libraries(imgui PUBLIC
	glfw
	GLEW::GLEW
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target example
set(CMKR_TARGET example)
set(example_SOURCES "")

list(APPEND example_SOURCES
	"src/main.cpp"
)

list(APPEND example_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${example_SOURCES})
add_executable(example)

if(example_SOURCES)
	target_sources(example PRIVATE ${example_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT example)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${example_SOURCES})

target_link_libraries(example PRIVATE
	imgui
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

